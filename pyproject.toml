[build-system]
requires = [
    "hatchling>=1.27.0",
    "hatch-vcs>=0.4.0",
] # Core build backend and VCS plugin
build-backend = "hatchling.build" # Use Hatchling as the build backend

[tool.hatch.build.targets.wheel]
packages = ['src/twat_cache']
[tool.hatch.build.hooks.vcs]
version-file = 'src/twat_cache/__version__.py'

[tool.hatch.version]
path = 'src/twat_cache/__version__.py'

[tool.hatch.version.raw-options]
version_scheme = 'post-release'
[tool.hatch.envs.default]
dependencies = [
    'pytest',
    'pytest-cov',
    'mypy>=1.15.0',
    'ruff>=0.9.6',
    'pytest>=8.3.4',
    'pytest-cov>=6.0.0',
    "numpy",
]

[tool.hatch.envs.default.scripts]
test = 'pytest {args:tests}'
test-cov = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/twat_cache --cov=tests {args:tests}'
type-check = 'mypy src/twat_cache tests'
lint = ['ruff check src/twat_cache tests', 'ruff format src/twat_cache tests']
[[tool.hatch.envs.all.matrix]]
python = ['3.10', '3.11', '3.12']

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "mypy>=1.15.0",
    "ruff>=0.9.6",
    "pyupgrade>=3.19.1",
    "pyupgrade-directories>=0.3.0",
]


[tool.hatch.envs.lint.scripts]
typing = 'mypy --install-types --non-interactive {args:src/twat_cache tests}'
style = ["ruff check {args:.}", "ruff format {args:.}"]
fmt = ["ruff format {args:.}", "ruff check --fix {args:.}"]
fix = "python -c 'import glob; from subprocess import run; run([\"pyupgrade\", \"--py310-plus\"] + glob.glob(\"**/*.py\", recursive=True))' && ruff check --fix --unsafe-fixes {args:.} && ruff format {args:.}"
all = ["style", "typing", "fix", "fmt"]


[tool.hatch.envs.test]
dependencies = [
    'pytest>=8.3.4',
    'pytest-cov>=6.0.0',
    'pytest-xdist>=3.6.1',
    'pytest-benchmark[histogram]>=5.1.0',
    "numpy",
]

[tool.hatch.envs.test.scripts]
test = 'python -m pytest -n auto {args:tests}'
test-cov = 'python -m pytest -n auto --cov-report=term-missing --cov-config=pyproject.toml --cov=src/twat_cache --cov=tests {args:tests}'
bench = 'python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only'
bench-save = 'python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only --benchmark-json=benchmark/results.json'

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
target-version = ['py310']
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = 'py310'
line-length = 88

[tool.ruff.lint]
extend-select = [
    'A',
    'ARG',
    'B',
    'C',
    'DTZ',
    'E',
    'EM',
    'F',
    'FBT',
    'I',
    'ICN',
    'ISC',
    'N',
    'PLC',
    'PLE',
    'PLR',
    'PLW',
    'Q',
    'RUF',
    'S',
    'T',
    'TID',
    'UP',
    'W',
    'YTT',
]
ignore = ['ARG001', 'E501', 'I001']

[tool.ruff.per-file-ignores]
"tests/*" = ['S101']
[tool.coverage.run]
source_pkgs = ['twat_cache', 'tests']
branch = true
parallel = true
omit = ['src/twat_cache/__about__.py']

[tool.coverage.paths]
twat_cache = ['src/twat_cache', '*/twat-cache/src/twat_cache']
tests = ['tests', '*/twat-cache/tests']

[tool.coverage.report]
exclude_lines = ['no cov', 'if __name__ == .__main__.:', 'if TYPE_CHECKING:']

[tool.mypy]
python_version = '3.10'
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
[tool.pytest.ini_options]
markers = [
    '''benchmark: marks tests as benchmarks (select with '-m benchmark')''',
]
addopts = '-v -p no:briefcase'
testpaths = ['tests']
python_files = ['test_*.py']
filterwarnings = ['ignore::DeprecationWarning', 'ignore::UserWarning']
asyncio_mode = 'auto'

[tool.pytest-benchmark]
min_rounds = 100
min_time = 0.1
histogram = true
storage = 'file'
save-data = true
compare = ['min', 'max', 'mean', 'stddev', 'median', 'iqr', 'ops', 'rounds']

[tool.rye]
managed = true
dev-dependencies = [
    'pytest>=8.3.4',
    'pytest-asyncio>=0.25.3',
    'pytest-cov>=6.0.0',
    'black>=25.1.0',
    'isort>=6.0.0',
    'mypy>=1.15.0',
    "numpy",
]

[project]
name = 'twat-cache'
version = '0.1.0'
description = 'Flexible caching utilities for Python functions with multiple high-performance backends'
readme = 'README.md'
requires-python = '>=3.9'
keywords = ['cache', 'caching', 'memoization', 'performance']
classifiers = [
    'Development Status :: 4 - Beta',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Topic :: Software Development :: Libraries :: Python Modules',
]
dependencies = []

[[project.authors]]
name = 'Adam Twardoch'
email = 'adam+github@twardoch.com'

[project.license]
text = 'MIT'

[project.urls]
Homepage = 'https://github.com/twardoch/twat-cache'
Documentation = 'https://github.com/twardoch/twat-cache#readme'
Issues = 'https://github.com/twardoch/twat-cache/issues'
Source = 'https://github.com/twardoch/twat-cache'
[project.entry-points."twat.plugins"]
cache = 'twat_cache'

[project.optional-dependencies]
platformdirs = ['platformdirs>=3.0.0']
cachebox = ['cachebox>=0.1.0']
cachetools = ['cachetools>=5.0.0']
aiocache = ['aiocache>=0.12.0']
klepto = ['klepto>=0.2.3']
diskcache = ['diskcache>=5.0.0']
joblib = ['joblib>=1.0.0']
all = [
    'platformdirs>=4.3.6',
    'cachebox>=4.5.1',
    'cachetools>=5.5.1',
    'aiocache>=0.12.3',
    'klepto>=0.2.6',
    'diskcache>=5.6.3',
    'joblib>=1.4.2',
]
